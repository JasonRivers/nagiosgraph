#!/usr/bin/perl

# File:    $Id$
# Author:  (c) Alan Brenner, Ithaka Harbors, 2008; Soren Dossing, 2005
# License: OSI Artistic License
#			http://www.opensource.org/licenses/artistic-license-2.0.php

# The configuration file and ngshared.pm must be in this directory.
use lib '/etc/nagios/nagiosgraph';
# The configuration loader will look for nagiosgraph.conf in this directory.
# So take note upgraders, there is no $configfile = '....' line anymore.

=head1 NAME

show.cgi - Graph Nagios data

=head1 SYNOPSIS

B<show.cgi>

=head1 DESCRIPTION

Run this via a web server cgi to generate an HTML page of data stored by
insert.pl (including the graphs).

=head1 REQUIREMENTS

=over 4

=item B<Nagios>

While this could probably run without Nagios, as long as RRD databases exist,
it is intended to work along side Nagios.

=item B<rrdtool>

This provides the data storage and graphing system.

=item B<RRDs>

This provides the perl interface to rrdtool.

=back

=head1 INSTALLATION

Copy this file into Nagios' cgi directory (for the Apache web server, see where
the ScriptAlias for /nagios/cgi-bin points), and make sure it is executable by
the web server.

Install the B<ngshared.pm> file and edit this file to change the B<use lib> line
(line 10) to point to the directory containing B<ngshared.pm>.

Create or edit the example B<nagiosgraph.conf>, which must reside in the same
directory as B<ngshared.pm>.

To link a web page generated by this script from Nagios, add definitions like:

=over 4

define serviceextinfo {
 service_description Current Load
 host_name           host1, host2
 action_url          show.cgi?host=$HOSTNAME$&service=$SERVICEDESC$
}

=back

to the Nagios configuration file(s). The service_description must match an
existing service. Only the hosts listed in host_name will have an action icon
next to the service name on a detail page.

Copy the images/action.gif file to the nagios/images directory, if desired.

=head1 AUTHOR

Soren Dossing, the original author in 2005.

Alan Brenner - alan.brenner@ithaka.org; I've updated this from the version
at http://nagiosgraph.wiki.sourceforge.net/ by moving some subroutines into a
shared file (ngshared.pm), adding color number nine, and adding support for
showhost.cgi and showservice.cgi.

=head1 BUGS

Undoubtedly there are some in here. I (Alan Brenner) have endevored to keep this
simple and tested.

=head1 SEE ALSO

B<nagiosgraph.conf> B<showhost.cgi> B<showservice.cgi> B<ngshared.pm>

=head1 COPYRIGHT

Copyright (C) 2005 Soren Dossing, 2008 Ithaka Harbors, Inc.

This program is free software; you can redistribute it and/or modify it under
the terms of the OSI Artistic License see:
http://www.opensource.org/licenses/artistic-license-2.0.php

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.

=cut

# Main program - change nothing below

use ngshared;

use strict;
use RRDs;
use CGI qw/:standard/;
use File::Find;

my ($host,						# Required hostname to show data for
	$service,					# Required service to show data for
	@style,						# CSS, if so configured
	@db,
	$graph,
	$geom,
	@rrdopts,
	$fixedscale,
	$offset,
	@periods,
	$period,
	$label,
	$url,
	$ii,						# temporary and for loop variable
	$labels);					# data labels from nagiosgraph.conf

readconfig('read');
if (defined $Config{ngshared}) {
	debug(1, $Config{ngshared});
	HTMLerror($Config{ngshared});
	exit;
}

# Expect host, service and db input
$host = param('host') if param('host');
$service = param('service') if param('service');
getdebug('show', $host, $service); # See if we have custom debug level
@db = param('db') if param('db');
dumper(5, 'db1', \@db);
# Detect available db files
@db = dbfilelist($host, $service) unless @db;
dumper(5, 'db2', \@db);
$graph = param('graph') if param('graph');
$geom = param('geom') if param('geom');
@rrdopts = param('rrdopts') if param('rrdopts');
# Reencode rrdopts
for ($ii = 0; $ii < @rrdopts; $ii++) {
	$rrdopts[$ii] = urlencode($rrdopts[$ii]);
	$rrdopts[$ii] .= ' ' if $rrdopts[$ii];
}
# Changed fixedscale checking since empty param was returning undef from CGI.pm
$fixedscale = 0;
$fixedscale = 1 if (grep /fixedscale/, param());
$offset = int(param('offset')) if param('offset');
$offset = 0 if not $offset or $offset <= 0;
@periods = (graphsizes($Config{time}));
$Config{linewidth} = 2 unless $Config{linewidth};
dumper(5, 'Config', \%Config);
# Draw the full page
@style = ( -style => {-src => "$Config{stylesheet}"} ) if ($Config{stylesheet});
print header, start_html(-id => "nagiosgraph",
	-title => "nagiosgraph: $host-$service",
	-head => meta({ -http_equiv => "Refresh", -content => "300" }),
	@style) . "\n";
# Print Navigation Menu if we have a separator set (that will allow navigation
# menu to correctly split the filenames/filepaths in host/service/db names.
printNavMenu($host, $service, $fixedscale)
	if ($Config{dbseparator} eq "subdir");

print h1("Nagiosgraph") . "\n" .
	p(trans('perfforhost') . ': ' . strong(tt(
		a({href => $Config{nagioscgiurl} . '/showhost.cgi?host=' .
				urlencode($host)}, urldecode($host)))) . ', ' .
		trans('service') . ': ' .
		strong(tt(a({href => $Config{nagioscgiurl} . '/showservice.cgi?service=' .
				urlencode($service)}, urldecode($service)))) . ' ' .
		trans('asof') . ': ' . strong(scalar(localtime))) . "\n";

for $period (@periods) {
	print a({-id => trans($period->[0])});
	print h2(trans($period->[0] . 'ly'));
	$url = join '&', "host=$host", "service=$service",
		"geom=$geom", map {"rrdopts=$_" } @rrdopts, map { "db=$_" } @db;
	print a({-href=>"?$url&offset=" .
			($offset + $period->[2]) . "#" . $period->[0]},
		trans('previous')) . " / " . a({-href=>"?$url&offset=" .
		($offset - $period->[2] . "#" . $period->[0]) }, trans('next')) .
		br() . "\n";
	dumper(5, 'db', \@db);
	if (@db) {
		my ($title) = 0;
		$title = 1
			if (exists $Config{graphlabels} and not exists $Config{nolabels});
		for ($ii = 0; $ii < @db; $ii++) {
			$labels = getLabels($service, $db[$ii]);
			$url = join '&', "host=$host", "service=$service", "db=$db[$ii]",
				'graph=' . $period->[1], "geom=$geom";
			$url .= "&fixedscale" if ($fixedscale);
			$url .= "&rrdopts=$rrdopts[$ii]";
			if ($title == 1 and
				urldecode($rrdopts[$ii]) !~ /(-t|--title)/ and @$labels) {
				$url .= '%20' if (substr($url, -1, 1) ne '=');
				$url .= urlLabels($labels);
				$url .= '%20' if (substr($url, -1, 1) ne '=');
			}
			print div({-class => "graphs"},
				img({-src => 'showgraph.cgi?' . $url . "%2Dsnow%2D" .
						$period->[1] . "%2D$offset%20%2Denow%2D$offset",
					-alt => join(', ', @$labels)})) . "\n";
			printLabels($labels) unless $title;
		}
	} else {
		$url = join '&', "host=$host", "service=$service", 'graph=' .
			$period->[1], "geom=$geom", "rrdopts=$rrdopts[0]";
		print div({-class => "graphs"},
			img({-src => "showgraph.cgi?$url", -alt => "Graph"})) . "\n";
	}
}

print div({-id => "footer"}, hr(),
	small(trans('createdby') . ' ' .
	a({href => "http://nagiosgraph.wiki.sourceforge.net/"},
	"Nagiosgraph " . $VERSION) . "." ));
print end_html();
